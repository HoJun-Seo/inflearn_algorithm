힙 혹은 이진 힙이라는 자료구조를 이용하여 정렬을 하는 알고리즘

최악의 경우 시간복잡도O(nlogn)
Sorts in place - 추가 배열 불필요(merge sort 같은 경우 추가 배열이 필요하다.)
- 추가적인 메모리 없이 원래 저장되어 있던 배열에서 서로 자리를 바꿈으로서 정렬이 수행된다.(sorts in place)
이진 힙(binary heap) 자료구조를 사용한다.

Heap
- complete binary tree 이면서 heap property 를 만족해야 한다.
- max heap property : 부모는 자식보다 크거나 같다. (힙의 각 노드에 데이터들이 저장되어 있는데 해당 데이터들을 기준으로 비교한다.)
- min heap property : 부모는 자식보다 작거나 같다.
- max heap, min heap 은 대칭관계이기 때문에 본질적으로 동일한 자료구조라고 할 수 있다.(변환시 부등호 정도만 바꿔줘도 됨)

complete binary tree?
- 마지막 레벨을 제외하면 완전히 꽉 차 있고, 마지막 레벨에는 가장 오른쪽부터 연속된 몇개의 노드가 비어있을 수 있다.(반드시 비어있어야 하는건 아님)
- 비어있는 공간이 있다면 반드시 오른쪽 노드부터 비어있어야 함.
full binary tree : 모든 레벨에 노드 들이 꽉 차 있는 형태(root node 만 존재하는 트리 역시 full binary tree 라고 할 수 있다.)
- full binary tree 자체가 complete binary tree 로 볼 수 있다.
* 트리에서 부모 노드가 존재하지 않는 노드를 root node 라고 한다.(항상 유일하다.)
* 트리에서 자식 노드가 존재하지 않는 노드를 leaf node 라고 한다.
* 이진트리 : 트리의 각 노드가 최대 2개의 자식 노드를 가지는 트리
* 자식 노드의 수가 똑같아도 자식 노드의 방향이 서로 다르다면, 두 트리는 서로 다르다고 한다.
* 동일한 데이터를 가졌다고 해서 힙의 모양이 유일하게 결정되진 않는다.(서로 다른 여러가지 모양이 있을 수 있음)

힙은 일차원 배열로 표현이 가능하다. : A[1..n]
- root node : A[1]
- A[i] 의 왼쪽 자식 : A[2i] - 인덱싱을 보면 어떤 노드의 자식 노드인지 알수 있게된다.
- A[i] 의 오른쪽 자식 : A[2i + 1] - 인덱싱을 보면 어떤 노드의 자식 노드인지 알수 있게된다.
- 인덱싱은 root node 부터 시작해서 각 레벨 별로 내려가며 순차적으로 순서를 매기면된다.

기본 연산 : MAX-HEAPIFY
- 전체를 힙으로 만들어라!

- 트리의 전체 모양은 complete binary tree 이다.
: 왼쪽 부 트리(sub tree) 는 그 자체로 heap 이고, 오른쪽 부 트리(sub tree) 도 그 자체로 heap 일 때, 유일하게 루트 만이 heap property 를 만족하지 않는 상황(root node 가 child node 보다 더 작다.)에서, 트리 전체를 힙으로 만들어주는 연산을 HEAPIFY 라고 부른다.

루트 노드를 아래로 내려보내야 하는데, 내려보낼때 두 자식들 중 더 큰 쪽이 root node 보다 크다면 해당 자식 노드와 exchange 한다.
그 이후 똑같은 과정을 반복해줌으로서 최종적으로 heap 을 완성해준다.

MAX-HEAPIFY - Recursive version
슈도 코드
MAX-HEAPIFY(A, i)
{
	if there is no child of A[i]
		return;
	k <- index of the biggest child of i;
	if A[i] >= A[k]
		return;
	exchange A[i] and A[k];
	MAX-HEAPIFY(A, k);
} //root node 에 대한 heapify 는 MAX-HEAPIFY(1) 을 호출하면 됨

MAX-HEAPIFY - Iterative version
MAX-HEAPIFY(A, i)
{
	while A[i] has a child do
		k <- index of the biggest child of i;
		if A[i] >= A[k]
			return;
		exchange A[i] and A[k];
		i = k;
	end.
}


정렬할 배열을 힙으로 만들기
Build-MAX-HEAP(A)
1 heap-size[A] <- length[A] //정렬할 데이터의 갯수
2 for i <- length[A] / 2 downto 1 // length[A] / 2 : 마지막 리프 노드의 부모 노드
3	do MAX-HEAPIFY(A,i)
시간복잡도: O(n)

4 1 3 2 16 9 10 14 8 7
리프 노드의 오른쪽 끝 노드 부터 정렬을 수행한다.
-> 16 14 10 8 7 9 3 2 4 1


2 8 6 1 10 15 3 12 11 을 힙으로 만들면?
주어진 데이터로 힙을 만든다.
힙에서 최대값(루트)을 가장 마지막 값과 바꾼다.
힙의 크기가 1 줄어든 것으로 간주한다(n = n - 1). 즉, 가장 마지막 값은 힙의 일부가 아닌것으로 간주한다.
루트 노드에 대해서 HEAPIFY(1) 한다.
2 ~ 4 번을 반복한다.

슈도 코드
HEAPSORT(A)
1. Build-MAX-HEAP(A)					: O(n)
2. for i <- heap_size downto 2 do //i : 현재 마지막 노드		: n - 1 times
3. 	exchange A[1] <-> A[i] //A[i] : root, A[i] : 마지막 	: O(1)
4.	heap_size <- heap_size - 1				: O(1)
5.	MAX-HEAPIFY(A,1)					: O(log2n)
Total time : O(nlog2n)