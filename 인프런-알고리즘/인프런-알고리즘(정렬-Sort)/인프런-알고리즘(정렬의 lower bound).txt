Comparsion Sort
정렬 알고리즘의 시간복잡도가 더 빠르고 낮아질수는 없는가?
결론은 불가능하다.
Comparsion Sort 인 경우엔 시간 복잡도가 O(nlogn) 보다 작아질수 없다.

데이터들간의 상대적 크기 관계만을 이용해서 정렬하는 알고리즘을 Comparsion Sort 라고 한다.
따라서 데이터들간의 크기 관계가 정의되어 있으면 어떤 데이터에든 적용이 가능하다.(문자열, 알파벳, 사용자 정의 객체 등)
버블 정렬, 삽입 정렬, 합병 정렬, 퀵 정렬, 힙 정렬 등

Non-comparsion sort
정렬할 데이터에 대한 사전지식을 이용 - 적용에 제한(데이터들 간의 크기 관계가 정해지지 않은 경우)
Bucket sort - 정렬할 데이터들을 각 버켓안에서 먼저 정렬을 한 후, 각 정렬들을 합침
Radix sort

정렬문제의 하한(Lower bound - 어떤 시간복잡도 보다 낮을 수 없다.(더 좋은 알고리즘이 존재할 수 없다.))
어떤 Comparsion sort 도 시간복잡도가 O(nlogn) 보다 낮을수 없다는 것을 증명해야 한다.
- 입력된 데이터를 한번 씩 다 보기 위해서 최소 O(n)의 시간복잡도가 필요하다.
- 합병 정렬과 힙 정렬 알고리즘 들의 시간복잡도는 O(nlog2n)
- 어떤 Comparison sort 알고리즘도 O(nlog2n) 보다 나을 수 없다.

Desicion tree - 임의의 comparsion sort 가 있다고 가정했을 때, 
decision tree 에서 leaf node 의 갯수? : n! 개 (데이터의 갯수에 따라 생길 수 있는 정렬의 결과 갯수 - 모든 순열(permutation)에 해당하기 때문)
데이터가 3개일 경우 3! = 1 * 2 * 3 = 6 개의 서로 다른 결과를 가져야 한다.
최악의 경우 시간복잡도는 트리의 높이에 비례한다.
트리의 높이는 height >= log2n! = O(nlog2n)
트리의 높이가 가장 낮아지는 법? - leaf node 의 갯수는 최대한 많이, 높이는 최대한 낮게 만들어야 한다.(이진 트리 모양이 최선)
이진 트리의 경우 시간복잡도는 전체 갯수가 n 개 일때 O(log2n)
leaf node 의 갯수만 n! 개 가 되어야 하는데 이보다 더 많다면 그 트리의 높이는 logn! = O(nlogn) 보다 더 낮아질 수는 없다.

Comparsion sort 를 decision tree 로 만들어 보면 해당 트리의  leaf node 는 n! 개가 되어야 한다.
어떤 이진 트리가 leaf node 를 n! 개를 가지려면 해당 트리의 높이는 logn! 보다 더 낮을수 없다.
따라서 어떤 Comparsion sort 든 decision tree 의 높이(시간복잡도)가 nlogn 보다 낮을수 없다. 