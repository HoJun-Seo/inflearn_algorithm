QuickSort
분할 정복법
- 분할 : 배열을 다음과 같은 조건이 만족되도록 두 부분으로 나눈다.
	elements in lower parts <= elements in upper parts
- 정복 : 각 부분을 순환적(recursion)으로 정렬한다.
- 합병 : nothing to do(아무것도 할 일이 없음 - 분할 이후 따로 정렬이 완료되기 때문)

데이터 중 기준값(pivot) 을 선택해야 한다.
어떤 값을 기준값으로 결정하는 것이 성능에 영향을 미친다고 볼 수는 없다.

quick sort 에서는 하나의 데이터를 pivot 으로 지정한 후, pivot 보다 작은 값, 큰 값으로 분할한다.
절반으로 쪼개지는지는 기준값에 따라 달라지므로 확신 할 수 없다.

- 정렬할 배열이 주어짐, 마지막 수를 기준(pivot) 으로 삼는다.
- 기준보다 작은 수는 기준의 왼쪽에, 나머지는 기준의 오른쪽에 오도록 재배치(분할 - partition) 한다.
- 기준의 왼쪽과 오른쪽을 각각 순환적으로 정렬한다.(정렬 완료)

슈도 코드
quickSort(A[], p, r) //A[p...r] 을 정렬한다.
{
	if(p < r) then {
		q = partition(A, p, r); //분할(q - pivot 의 위치)
		quickSort(A, p, q - 1); //왼쪽 부분배열 정렬
		quickSort(A, q + 1, r); //오른쪽 부분배열 정렬
	}
}
partition(A[], p, r)
{
	배열 A[p...r] 의 원소들을 A[r] 을 기준으로 양쪽으로 재배치하고
	A[r] 이 자리한 위치를 return 한다. //A[r] : 배열의 마지막 값 - pivot
}

Partition
p ~ i // i : pivot 보다 작은 값들 중 마지막 값
j : pivot 보다 큰 값들 중 지금 검사하려는 값

if A[j] >= x(pivot) //현재 검사하는 값이 기준값보다 크다면
	j <- j + 1; //그 다음 값을 검사한다.
else //현재 검사하는 값이 기준값보자 작다면
	i <- i + 1; //기준값보다 작은값들 중 가장 큰 값에서, 기준값보다 큰 값중 가장 작은 값으로 위치를 옮긴다.
	exchange A[i] and A[j]; //현재 검사한 값을 기준값보다 작은 값 배열에 추가(교환)한다.
	j <- j + 1; //다음 값을 검사한다.

Partition 슈도 코드
Partition(A, p, r)
{
	x <- A[r];
	i <- p - 1;
	for j <- p to r - 1
		if A[j] <= x then
			i <- i + 1;
			exchange A[i] and A[j];
	exchange A[i + 1] and A[r];
	return i + 1;
}

항상 한 쪽은 0개, 다른 쪽은 n - 1 개로 분할되는 경우
T(n) = T(0) + T(n - 1) + O(n)
      = T(n - 1) + O(n)
      = T(n - 2) + T(n - 1) + O(n - 1) + O(n)
		.......
      = O(1) + O(2) + O(n - 1) + O(n)
      = O(n^2)

퀵 소트 에서 최악의 경우는 데이터들이 이미 정렬되어(마지막 원소를 피봇으로 선택하는 경우) 있는 경우 발생한다.
퀵 소트에서 최상의 경우는 항상 절반으로 분할되는 경우이다.
T(n) = 2T(n/2) + O(n)
      = O(nlogn)

기준값(pivot)의 선택
- 첫번째 값이나 마지막 값을 기준값으로 선택
 - 이미 정렬된 데이터 혹은 거꾸로 정렬된 데이터가 최악의 경우
 - 현실의 데이터는 랜덤하지 않으므로 (거꾸로) 정렬된 데이터가 입력으로 들어올 가능성은 매우 높음
 - 따라서 좋은 방법이라고 할 수 없음
- "Median of Three"
 - 첫번째 값과 마지막 값, 그리고 가운데 값 중에서 중간값(median) 을 피봇으로 선택
 - 최악의 경우 시간 복잡도가 달라지지는 않음
- Randomized QuickSort
 - 피봇을 랜덤하게 선택
 - no worst case instance, but worst case execution
 - 평균 시간복잡도 O(NlogN)