선형시간 정렬 알고리즘

선형시간 : O(n) - comparison sort 가 아님(어떤 comparison sort 도 선형 시간 알고리즘을 가질 수 없다.)
Counting sort
- n 개의 정수를 정렬하라, 단 모든 정수는 0에서 k 사이의 정수이다. (사전 지식이 존재하므로 comparison sort 가 아니다.) - k가 비교적 작을 경우 생각해볼수 있는 알고리즘
- 예 : n 명의 학생들의 시험점수를 정렬하라. 단 모든 점수는 100이하의 양의 정수이다.
입력에서 어떤 값이 몇번 나왔느냐를 counting 한다.

int A[n]; //정렬할 데이터(0..k)
int C[k] = {0. }; //C[0]...C[k] - 각각의 숫자가 몇번 나왔는지 카운트하는 배열로 쓴다.
for(int i = 1; i <= n; i++)
	C[A[i]]++; //A[i] 값에 해당하는 카운터 1 증가
for(int s = 1, i = 0; i <= k; i++) { // s : 출력할 배열의 인덱스
	for(int j = 0; j < C[i]; j++) {
		A[s++] = i; //배열에 원소가 추가될 때마다 s 값 증가
	}
} // It is okay? : No, 대부분의 경우 정렬할 key 값들은 레코드의 일부분이기 때문(보통 정렬할 데이터들은 다른 데이터들과 함께 엮이는 경우가 많다.)

각각의 데이터에 대한 카운팅
데이터 들의 누적 합을 구함(해당 원소보다 작거나 같은 원소들의 갯수)
누적합이 가지고 있는 정보를 어떻게 해석 할까?
데이터들을 오름차순으로 다시 정렬할 때 누적합 배열을 참조한다.
기존 배열에 있는 데이터들을 읽을 때, 읽은 데이터에 해당하는 원소의 정렬 위치를 누적합 배열의 누적합 값을 참조하여 배열의 적절한 위치에 정렬 시킨 후, 그 원소에 해당하는 누적합 값을 1씩 감소시키는 방식으로 정렬을 진행한다.

슈도 코드
Counting-Sort(A, B, k)
for i <- 0 to k
	do C[i] <- 0 //C 배열을 0으로 초기화
for j <- 1 to length[A]
	do C[A[j]] <- C[A[j]] + 1 //각각의 데이터들 마다 카운트
: C[i] now contains the number of elements equal to i
for i <- 1 to k //정수 i의 갯수
	do C[i] <- C[i] + C[i - 1] //누적합 구함
: C[i] now contains the number of elements less than or equal to i
for j <- length[A] downto 1 //배열 A 를 끝에서 부터 역으로 읽으면서 각각의 데이터 A[j] 에 대해 배열 B 의 C[A[j]] 번째 인덱스에 넣는다(정렬한다.)
	do B[C[A[j]]] <- A[j]
	C[A[j]] <- C[A[j]] - 1

counting sort 의 시간복잡도
O(n + k) 또는 O(n) if k = 0(n) //k 가 n보다 작은 경우
k 가 클 경우 비 실용적이다.
Stable 정렬 알고리즘
- 입력에 동일한 값이 있을때 입력에 먼저 나오는 값이 출력에서도 먼저 나온다.
- Counting 정렬은 stable 하다.


Radix Sort
sorting 할 데이터들이 n 개의 d 자리 정수들인 것으로 가정(반드시 숫자일 필요는 없음)
가장 낮은 자리 수 부터 정렬한다.
stable sort ? : 똑같은 값이 2개 이상 있다면 이를 정렬했을 때, 이 순서가 똑같이 유지 되어야 한다.(정렬 되더라도 똑같은 값을 가지는 두 데이터의 순서가 바뀌어서는 안된다.)
각 자리 별로 counting sort 를 적용시킬 수 있다.

슈도 코드
RADIX-SORT(A, d)
1 for i <- 1 to d
2	do use a stable sort to sort array A on digit i
시간복잡도 O(d(n + k)) // n : 데이터의 갯수, k : 데이터들이 가질 수 있는 값의 서로 다른 갯수