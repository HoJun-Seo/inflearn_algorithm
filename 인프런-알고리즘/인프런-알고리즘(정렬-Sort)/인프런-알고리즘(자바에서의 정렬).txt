자바에서의 정렬(Sorting in java)

기본 타입 데이터의 정렬
Arrays class 가 primitive 타입 데이터를 위한 정렬 메서드를 제공한다.
int []data = new int [capacity];
//data[0] 에서 data[capacity - 1] 까지 데이터가 꽉 차 있는 경우에는 다음과 같이 정렬한다.
Arrays.sort(data); <- 배열의 이름만 매개변수로 넘겨주면 알아서 정렬해줌
//배열이 꽉 차있지 않고 data[0] 에서 data[size - 1] 까지 size 개의 데이터만 있다면 다음과 같이 한다.
Arrays.sort(data, 0 ,size); <- 배열 data 에서 시작 인덱스 0 부터 size 까지 정렬한다.
- int 이외의 다른 primitive type data(double, char 등)에 대해서도 제공한다.

객체의 정렬 : 문자열
String [] fruits = new String [] {"Pineapple", "Apple", "Orange", "Banana"};
Arrays.sort(fruits);
for(String name : fruits)
	System.out.println(name); //primitive type data 와 마찬가지로 Arrays.sort method 로 정렬된다.

ArrayList 정렬 : 문자열
List<String> fruits = new ArrayList<String>(); 
fits.add("Pineapple");
fits.add("Apple");
fits.add("orange");
fits.add("Banana");
Collections.sort(fruits);
for(String name : fruits)
	System.out.println(name); //Collections.sort method 로 정렬된다.

객체의 정렬 : 사용자 정의 객체
public class Fruits {
	public String name;
	public int quantity;
	public Fruit(String name, int quantity) {
		this.name = name;
		this.quantity = quantity;
	}
}

//somewhere in your program
Fruits [] fruits = new Fruits[4];
fruits[0] = new Fruits("Pineapple", 70);
fruits[1] = new Fruits("Apple", 100);
fruits[2] = new Fruits("Orange", 80);
fruits[3] = new Fruits("Banana", 90);
Arrays.sort(fruits); //어떻게 될까?
여기서는 sort 가 의미하는 바가 모호하다.(어떤 것을 기준으로 정렬할 것인가?)
정렬을 하기 전에 먼저 객체들간의 크기 관계를 지정을 해야 한다.


Comparable Inteface //자바에서 미리 정의해놓은 인터페이스(Generic)
public class Fruits implements Comparable<Fruits>{ 
	public String name;
	public int quantity;
	public Fruit(String name, int quantity) {
		this.name = name;
		this.quantity = quantity;
	}
	public int compareTo(Fruit other){ //Interface method override , 결과를 음수, 0 양수로 리턴하는 메소드(음수 : 내가 더 작음, 0 : 같음, 양수 : 내가 더 큼)
		return name.compareTo(other.name); //이름순으로 정렬한다.
	}
}

//somewhere in your program
Fruits [] fruits = new Fruits[4];
fruits[0] = new Fruits("Pineapple", 70);
fruits[1] = new Fruits("Apple", 100);
fruits[2] = new Fruits("Orange", 80);
fruits[3] = new Fruits("Banana", 90);
Arrays.sort(fruits);

재고 수량으로 정렬하고 싶다면?

Comparable Inteface
public class Fruits implements Comparable<Fruits>{ 
	public String name;
	public int quantity;
	public Fruit(String name, int quantity) {
		this.name = name;
		this.quantity = quantity;
	}
	public int compareTo(Fruit other){ //Interface method override
		return quantity - other.quantity;
	}
}

//somewhere in your program
Fruits [] fruits = new Fruits[4];
fruits[0] = new Fruits("Pineapple", 70);
fruits[1] = new Fruits("Apple", 100);
fruits[2] = new Fruits("Orange", 80);
fruits[3] = new Fruits("Banana", 90);
Arrays.sort(fruits);

두 가지 기준을 동시에 제공하고 싶다면
하나의 객체 타입에 대해서 2가지 이상의 기준으로 정렬을 지원하려면 Comparator 을 사용한다.
이름순으로 비교하는 compareTo메소드와 재고 수량으로 비교하는 compareTo메소드를 class Fruits 이 동시에 가지고 있을 수는 없기 때문



Comparator
Comparator<Fruit> nameComparator = new Comparator<Fruit>() { //Comparator class를(엄밀하게 말하면 interface 이다.) extends 하며 compare method를 overriding 하는 새로운 이름 없는 클래스를 정의 한 후 그 클래스의 객체를 하나 생성한다. 
	public int compare(Fruit fruit1, Fruit fruit2) {
		return fruit1.name.compareTo(fruit2.name);
	}
};
Comparator<Fruit> quantComparator = new Comparator<Fruit>() {
	public int compare(Fruit fruit1, Fruit fruit2) {
		return fruit1.quantity - fruit2.quantity;
	}
};
Arrays.sort(fruits, nameComparator); // nameComparator 는 Comparator interface 를 implements 하는 어떤 class 의 객체(compare 를 멤버 메소드로 가지고 있다. - 해당 메소드를 통해 정렬을 수행한다.)이다.
//or
Arrays.sort(fruits, quantComparator);


public class Fruit {
	public String name;
	public int quantity;
	public Fruit(String name, int quantity) {
		this.name = name;
		this.quantity = quantity;
	}
	public static Comparator<Fruit> nameComparator = new Comparator<Fruit>(){
		public int compare(Fruit fruit1, Fruit fruit2) {
			return fruit1.name.compareTo(fruit2.name);
		}
	};
	public static Comparator<Fruit> quantComparator = new Comparator<Fruit>() {
		public int compare(Fruit fruit1, Fruit fruit2) {
			return fruit1.quantity - fruit2.quantity;
		}
	};
} //데이터 객체의 static member 로 둔다. 정렬할 때는 Arrays.sort(fruits, Fruit.nameComparator);
static member 로 두는 이유? 모든 Fruit 객체들이 두 개의 Comparator 를 모두 가지고 있을 필요가 없다. 그러므로 static 키워드를 통해 class 멤버로 지정해 놓는다.