Recursion - 자기 자신을 호출하는 함수(재귀함수)
자바의 경우 자기 자신을 호출하는 메소드
void func(..)
{
	func(..)
}

recursion code 해석의 요령
public static int func(int n){ // 이 함수의 mission 은 0 ~ n 까지의 합을 구하는 것이다.
	if(n == 0) return 0; //n = 0 이라면 합은 0 이다.
	else return n + func(n - 1); //n 이 0 보다 크다면 0 에서 n 까지의 합은 0 에서 n - 1 까지의 합에 n  을 더한 것이다.
순환함수와 수학적 귀납법
정리 : func(int n)은 음이 아닌 정수 n에 대해서 0 에서 n 까지의 합을 올바로 계산한다.
증명
1. n = 0 인 경우 : n = 0 인 경우 0 을 반환한다. (올바르다.)
2. 임의의 양의 정수 k 에 대해서 n < k 인 경우 0 에서 n 까지의 합을 올바르게 계산하여 반환한다고 가정하자.
3. n = k 인 경우를 고려해보자, func 은 먼저 func(k - 1) 을 호출하는데, 2번의 가정에 의해서 0 에서 k - 1 까지의 합이 올바르게 계산되어 반환된다. 메소드 func 은 그 값에 n 을 더해서 반환한다. 따라서 메소드 func 은 0에서 k 까지의 합을 올바르게 계산하여 반환한다.

public static int factorial(int n)
{
	if(n == 0) return 1;
	else return n * factorial(n - 1);
}
정리 : factorial(int n)은 음이 아닌 정수 n 에 대해서 n! 을 올바르게 계산한다.
증명
1. n = 0 인 경우 : n = 0 인 경우 1을 반환한다. (올바르다.)
2. 임의의 양의 정수 k에 대해서 n < k 인 경우 n! 을 올바르게 계산한다고 가정하자.
3. n = k 인 경우를 고려해보자, factorial 은 먼저 factorial(k - 1) 을 호출하는데, 2번의 가정에 의헤서 (k - 1)! 이 올바르게 계산되어 반환된다.따라서 메소드 factorial 은 k * (k - 1)! = k! 을 반환한다.

x^n (x의 n승을 계산하는 함수(n은 0이 아닌 경우))
x^0 = 1, x^n = x * x^(n-1) (n > 0)
public static double power(double x, int n) {
	if(n == 0) return 1;
	else return x * power(x, n-1);
}

Fibonacci Number
f0 = 0
f1 = 1
fn = f(n-1) + f(n-2) (n > 1)
public int fibonacci(int n) {
	if(n < 2) return n;
	else return fibonacci(n-1) + fibonacci(n - 2)
}

최대 공약수 : Euclid method
public static double gcd(int m, int n) {
	if(m < n){
		int tmp = m; m = n; n = tmp; //swap m and n
	}
	if(m % n == 0) return n;
	else return gcd(n, m%n);
}
m >= n 인 두 양의 정수 m과 n에 대해서 m 이 n의 배수이면 gcd(m,n) = n 이고, 그렇지 않으면 gcd(m,n) = gcd(n, m%n) 이다.

좀 더 단순한 버전
gcd(p,q) = p (if q = 0) - 둘 중 하나가 0 이라면
gcd(p,q) = gcd(q, p%q) otherwise(그렇지 않다면 q와, p와 q를 나눈 나머지 간의 최대 공약수와 같다.)
public static int gcd(int p, int q){
	if(q == 0) return p;
	else return gcd(q, p%q); //무한 루프에 빠지지 않는다.
}


Recursive Thinking - 순환적으로 사고하기
Recursion 은 프로그램을 보는 하나의 또다른 관점이 내재 되어있다고 얘기할 수 있다.
Recursion 은 수학 함수 뿐만 아니라 다른 많은 문제들을 해결 할 수 있다.

문자열의 길이 계산(길이의 차이가 1인 문자열 두 개가 있는 경우)
if the string is empty return 0; (base case)
else return 1 plus the length of the string that excludes the first character;

public static int length(String str) {
	if(str.equals("")) return 0;
	else return 1 + length(str.substring(1)); //substring method : 원래 문자열에서 첫번째 문자를 제거한 문자열을 만들어주는 메소드(length method 재귀호출)
}

문자열의 프린트
public static void printChars(String str) {
	if(str.length() == 0) return;
	else {
		System.out.print(str.charAt(0));
		printChars(str.substring(1));
	}
}

문자열을 뒤집어서 프린트
public static void printCharsReverse(String str) {
	if(str.length() == 0) return;
	else {
		printCharsReverse(str.substring(1));
		System.out.print(str.charAt(0)); //위의 메소드와 바뀐것은 else 문 안의 문장의 순서가 바뀐것 밖에 없다.
	}
}

2진수로 변환하여 출력
public void printInBinary(int n) { //음이 아닌 정수 n을 이진수로 변환하여 출력한다.
	if(n < 2) System.out.print(n);
	else {
		printInBinary(n/2); // n을 2로 나눈 몫을 먼저 2진수로 변환하여 출력한 후
		System.out.print(n%2); //n을 2로 나눈 나머지를 출력한다.
	}
}

data[0]에서 data[n-1] 까지의 합을 구하여 반환한다.
public static int sum(int n, int []data) {
	if(n <= 0) return 0;
	else return sum(n-1, data) + data[n-1];
}

데이터 파일로부터 n개의 정수 읽어오기
Scanner in 이 참조하는 파일로부터 n 개의 정수를 입력받아 배열 data의 data[0], ..... ,data[n-1]에 저장한다.
public void readFrom(int n, int[] data, Scanner in) {
	if(n == 0) return;
	else {
		readFrom(n-1, data, in);
		data[n-1] = in.nextInt();
	}
}

Recursion vs Iteration
모든 순환함수는 반복문(iteration) 으로 변경 가능
그 반대도 성립함, 즉 모든 반복문은 recursion 으로 표현 가능함
순환함수는 복잡한 알고리즘을 단순하고 알기 쉽게 표현하는 것을 가능하게 한다.
하지만 함수 호출에 따른 오버헤드가 있다.(매개변수 전달, 액티베이션 프레임 생성 등)




Designing Recursion
순환 알고리즘의 설계(방법 또는 요령)
적어도 하나의 base case, 즉 순환되지 않고 종료되는 case 가 있어야 한다. - 존재하지 않는다면 무한 루프에 빠지게 된다.
(그러나 base case 가 있다고 무조건 무한 루프를 피할 수 있는 건 아님)
모든 case 는 결국 base case 로 수렴해야 한다.

암시적(implicit) 매개 변수를 명시적(explicit) 매개 변수로 바꾸어라.
int search(int []data, int n, int target){ //순차 탐색(sequential search) - 정렬되어 있지 않은 배열의 경우 처음 부터 하나씩 검사 할 수 밖에 없다. 정렬되어 있을 경우 이진 탐색이 가능하다.
	for(int i = 0; i < n; i++)
		if(data[i] == target) return i;
	return -1; //검색하는 값이 존재하지 않으면 -1 을 반환한다.
}
-> 이 함수의 미션은 data[0] 에서 data[n-1] 사이에서 target 을 검색하는 것이다. (n-1 은 매개변수 n 에 의해 명시적으로 표현된다.)
하지만 검색 구간의 시작 인덱스 0 은 보통 생략한다.(즉, 0은 암시적 매개변수 이다.) - 시작위치는 명시적이지 않다.

Recursion 을 이용하는 순차탐색 (매개 변수의 명시화, 시작점, 끝 점 모두 명시적이다.)
int search(int []data, int begin. int end, int target){ // 이 함수의 미션은 data[begin] 에서 data[end] 사이에서 target 을 검색한다. 즉, 검색구간의 시작점을 명시적(explicit) 으로 지정한다.
	if(begin > end) return -1;
	else if(target == items[begin]) return begin;
	else return search(data, begin+1, end, target); //Recursion 을 통해 순차 탐색을 수행한다.
	//시작점을 명시적으로 지정해주지 않으면 recursion 시 시작점이 달라지는 것을 표현 하기 힘들어진다.
}
// 이 함수를 search(data, 0 , n-1, target) 으로 호출한다면 위의 함수와 완전히 동일한 일을 한다.

int search(int []data, int begin, int end, int target){
	if(begin > end) return -1;
	else if(target == items[end]) return end;
	else return search(data, begin, end - 1, target);
}-> 이 함수의 미션은 data[begin] 에서 data[end] 사이에서 target 을 검색한다. 즉, 검색구간의 시작점을 명시적(explicit) 으로 지정한다.

int search(int []data, int begin, int end, int target) { //binary seach 와는 다르다.
	if(begin > end) return -1;
	else {
		int middle = (begin + end) / 2;
		if(data[middle] == target) return middle;
		int index = search(data, begin, middle - 1, target);
		if(index != -1) return index;
		else return search(data, middle + 1, end, target);
	}
}

매개변수의 명시화 : 최대값 찾기
int findMax(int []data, int begin, int end) {
	if(begin == end) return data[begin];
	else return Math.max(data[begin], findMax(data, begin + 1, end));
} -> 이 함수의 미션은 data[begin] 에서 data[end] 사이에서 최대값을 찾아 반환한다. begin <= end 라고 가정한다.

최대값 찾기 다른 버전
int findMaxx(int []data, int begin, int end) {
	if(begin == end) return data[begin];
	else {
		int middle = (begin + end) / 2;
		int max1 = findMax(data, begin, middle);
		int max2 = findMax(data, middle + 1, end);
		return Math.max(max1, max2);
	}
}

Binary Search : 이진 탐색
items[begin] 에서 items[end] 사이에서 target 을 검색한다.
public static int binarySearch(String[] items, String target, int begin, int end) {
	if(begin > end) return -1;
	else {
		int middle = (begin + end) / 2;
		int compResult = target.compareTo(items[middle]);
		if(compResult == 0) return middle;
		else if(compResult < 0) return binarySearch(items, target, begin, middle - 1);
		else return binarySearch(items, target, middle + 1, end);
	}
}