1. 그래프(graph) 개념과 표현
그래프 알고리즘(graph algorithms)
개념과 표현(concepts and representations)

일반적인 그래프에 대한 표현
undirected graph
- (무방향) 그래프 G = (V, E) : V 와 E 는 둘 다 각각의 집합을 뜻한다. (이 그래프는 두 개의 집합에 의해 이루어지는 구조체이다.)
V : 노드(node) 혹은 정점(vertex)
E : 노드 쌍을 연결하는 에지(edge) 혹은 링크(link)
개체(object) 들 간의 이진 관계를 표현한다.
n = |V|, m = |E|

V = {1,2,3,4,5,6,7,8}
E = {(1,2), (1,3), (2,3), (2,4), (2,5), (3,5), (3,7), (3,8), (4,5), (5,6), (7,8)}
n = 8
m = 11


방향 그래프(directed graph) G = (V,E)
- 에지 (u,v) 는 u 로부터 v 로의 방향을 가진다.
   u -> v 
   (u,v) != (v,u)

가중치(weighted) 그래프
- 에지마다 가중치(weight) 가 지정되어 있다.


그래프의 표현(그래프가 있을 때 해당 그래프를 프로그램 내부에서 어떤 자료구조로 표현하는가?)
인접 행렬(adjacency matrix) - 정점의 갯수가 n 인 그래프를 n x n 인 2차원 행렬로 표현한다.
: n x n 행렬 A = (a(ij)), where a(ij) = 1       if(i,j) in E
                                        0       otherwise

해당 행렬은 대칭 행렬의 형태로 나타난다.
저장공간 : O(n^2) - n x n 행렬을 사용하므로
어떤 노드 v 에 인접한 모든 노드 찾기 : O(n) 시간 - 찾고자 하는 노드의 행 또는 열에 있는 모든 요소들을 검사해야 한다. 
어떤 에지 (u,v) 가 존재하는지 검사 : O(1) 시간 - 해당 하는 요소를 직접 저격하여 찾으면 되므로

인접 리스트(adjacency list)
- 정점 집합을 표현하는 하나의 배열과 각 정점 마다 인접한 정점들의 연결 리스트
1 -> 2() -> 5(/)
2 -> 1() -> 5() -> 3() -> 4(/) (인접한 노드들 끼리의 순서는 중요하지 않다.)
3 -> 2() -> 4(/)
4 -> 2() -> 5() -> 3(/)
5 -> 4() -> 1() -> 2(/)
그래프 에지 갯수 : 7개(m)
총 노드 갯수 : 2m = 14개 (방향이 없는 그래프의 경우)

저장공간 : O(n + m)
어떤 노드 v에 인접한 모든 노드 찾기 : O(degree(v)) 시간 - 해당하는 연결 리스트의 길이(degree)에 비례한 시간이 걸린다.(최악의 경우 degree 가 n - 1 이 될 수 있다.)
어떤 에지 (u,v) 가 존재하는지 검사 : O(degree(u)) 시간 - 해당하는 연결 리스트에 찾고자 하는 요소가 존재하는지 를 확인해야 하기 때문에 연결 리스트의 길이에 비례한 시간이 걸린다.


방향 그래프에서 인접 행렬과 인접 리스트
- 인접 행렬은 비대칭
- 인접 리스트는 m 개의 노드를 가진다. (무방향 그래프는 2m 개)


가중치 그래프의 인접 행렬 표현
- 에지의 존재를 나타내는 값으로 1 대신 에지의 가중치를 저장한다.
- 에지가 없을 때 혹은 대각선 :
  - 특별히 정해진 규칙은 없으며, 그래프와 가중치가 의미하는 바에 따른다.
  - 예시 : 가중치가 거리 혹은 비용을 의미하는 경우라면 에지가 없으면 oo (infinity), 대각선은 0 (자기 자신으로부터 자기 자신 까지의 거리)
  - 예시 : 만약 가중치가 용량을 의미한다면 에지가 없을 때 0, 대각선은 oo(infinity)


  경로와 연결성
  - 무방향 그래프 G = (V,E) 에서 노드 u 와 노드 v 를 연결하는 경로(path) 가 존재할 때 v 와 u 는 서로 연결되어 있다고 말한다.
  - 모든 노드 쌍들이 서로 연결된 그래프를 연결된(connected) 그래프 라고 한다. (방향 그래프의 경우에는 연결성을 설명하기 조금 복잡해진다. - 한 쪽에서 한 쪽으로 방향성이 있다고 하더라도 반대쪽은 그렇지 않을 수 있기 때문)
  - 연결 요소(connected component)
    : 하나의 그래프는 연결 요소를 여러개 가지고 있을 수 있다.(연결된 그래프(connected graph) 가 아닌 경우 해당)