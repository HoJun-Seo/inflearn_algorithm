그래프 순회(graph traversal)
순회(traversal)
: 그래프의 모든 노드들을 방문하는 일
- 대표적인 두 가지 방법
1) BFS(Breadth-First Search, 너비 우선순회)
2) DFS(Depth-First Search, 깊이 우선순회)

너비 우선순회(BFS)
- 노드들을 동심원의 형태로 순회하는 알고리즘
BFS 알고리즘은 다음 순서로 노드들을 방문한다.
- L0 = {s}, 여기서 s 는 출발 노드
- L1 = L0 의 모든 이웃 노드들(에지로 직접 연결되어 있는 노드들 - s 로부터 거리가 1인 노드들)
- L2 = L1 의 이웃들 중 L0 에 속하지 않는 노드들(s 로부터 거리가 2인 노드들 = s 로부터 거리가 1인 노드들과 1만큼의 거리에 떨어져 있는 노드들)
...............
- Li = Li-1 의 이웃들 중 Li-2 에 속하지 않는 노드들

문제는 위와 같은 procedure 를 프로그램에서 어떤 식으로 코딩을 해야 할까?
일반적으로 너비 우선순회 알고리즘을 구현하는 간단한 방법은 큐를 이용하는 것
이미 한번 비슷한걸 다뤄 본 적 있다.(이진 트리에서 level-order traversal : BFS 의 이진트리 버전)
1. check the start node; (여기서 check 는 이미 방문한 노드 라는 뜻 - 시작 노드에 check 표시, 즉 이미 방문한 노드임을 지정한다.)
2. insert the start node into the queue;(큐에 start node 를 삽입한다.)
3. while the queue is not empty do(큐에 노드가 존재하지 않을 때 까지 반복문 실행)
    remove a node v from queue;(큐에서 노드를 하나 꺼낸다. - 항상 맨 앞에 있는 노드가 밖으로 나옴(이 경우에선 시작 노드))
    for each unchecked neighbor w of v do(큐에서 꺼낸 노드의 모든 인접한 노드들 중에서 아직 방문하지 않은 노드들을 방문한 후 큐에 넣는다. - 넣는 노드간의 순서는 중요하지 않다.)
        check and insert w into the queue;

항상 노드들의 방문 순서는 유일하지 않다.

너비 우선순회(BFS) - 슈도 코드
BFS(G,s) // 그래프 G 와 출발 노드 s
    Q <- 0; // 내부가 비어있는 큐 선언
    Enqueue(Q,s); // 큐에 시작 노드 삽입
    while Q != 0 do // 큐가 비어있지 않은 동안 반복문 실행
        u <- Dequeue(Q) // 큐 에서 가장 앞에 있는 노드 인출(이미 방문한 노드)
        for each v adjacent to u do // 인출한 노드 u 에서 인접한 노드들 v 를 대상으로 반복문 실행
            if v is unvisited then // 인접한 노드 v 가 아직 방문하지 않은 노드들일 경우
                mark v as visited; // v 에 방문 표시 지정
                Enqueue(Q,v); // 큐에 v 노드 삽입
            end.
        end.
    end. 

BFS 와 최단 경로
단순히 그래프의 모든 노드들을 방문하는 것 이상의 중요한 일을 할 수 있다 - 최단 경로
s 에서 Li 에 속한 노드까지의 최단 경로의 길이는 i 이다. (여기서 경로의 길이는 경로에 속한 모든 에지의 갯수를 의미한다.)
BFS 를 하면서 각 노드에 대해서 최단 경로의 길이를 구할 수 있다.
실제로 최단 경로를 구하기 위해서는 위에서 작성한 슈도 코드를 기반으로 하여 추가적인 변수들이 포함된 코딩이 필요하다.

BFS 와 최단경로
입력 : 방향 혹은 무방향 그래프 G = (V,E), 그리고 출발 노드 s (여기서 출발 노드 s 는 모든 노드 V 에 속한다.)
출력 : 모든 노드 V 에 대해서
    - d[v] = s 로부터 v 까지의 최단 경로의 길이(에지의 갯수)
    - π[v] = s 로부터 v 까지의 최단 경로상에서 v의 직전 노드 (predecessor)

너비 우선순회(BFS) 최단 경로 슈도 코드
BFS(G,s)
    Q <- 0;
    d[s] <- 0; // distance from s to s is 0
    π[s] <- null; // no predecessor of s
    Enqueue(Q,s);
    while Q != 0 do
        u <- Dequeue(Q)
        for each v adjacent to u do
            if v is unvisited then // 보통 모든 노드들에 대해서 d[v] 를 -1 로 초기화 해두고, -1 이면 unvisited, 아니면 visited 로 판단한다.
                mark v as visited;
                d[v] <- d[u] + 1; // distance to v
                π[v] <- u; // u is the predecessor of v
                Enqueue(Q,v);
            end.
        end. // O(n + m) with adjacent list

인접리스트로 구현할 경우 시간 복잡도
BFS(G,s)
    Q <- 0;
    for each node u do
        d[u] <- -1;
        π[u] <- null;
    end.
    d[s] <- 0; π[s] <- null;
    Enqueue(Q,s);
    while Q != 0 do // while 문을 한 번 돌 때마다 큐에서 하나를 꺼내므로 while 문은 최대 n번 돈다.
        u <- Dequeue(Q)
        for each v adjacent to u do // 인접리스트로 구현 할 경우 for 문은 각 노드 v에 대해서 degree(v) 번 돈다.
            if(d[v] == -1) then // 노드가 unvisited 인지 아닌지를 체크
                d[v] <- d[u] + 1;
                π[v] <- u;
                Enqueue(Q,v); // unchecked 노드만 queue 에 들어갈 수 있으므로 어떤 노드도 큐에 두번 들어가지는 않는다.
            end.
        end.
인접리스트로 구현할 경우 시간복잡도는
 Σ degree(v) = 2m 이므로 O(n + m) 여기서 degree 는 어떤 한 노드에 실제로 인접한 노드의 갯수
 BFS 는 인접리스트로 구현하느냐 또는 인접 행렬로 구현하느냐 에 따라 시간복잡도가 달라진다.
 인접 행렬일 경우 시간복잡도 : O(n^2)

 BFS 트리
 각 노드 v 와 π[v] 를 연결하는 에지들로 구성된 트리
 (어떤 노드 v 와 자신의 predecessor 인 π[v]를 연결하게 되면 하나의 트리가 만들어지는데 그것을  BFS 트리라고 한다.)
 BFS 트리에서 s 에서 v 까지의 경로는 s 에서 v 까지 가는 최단 경로이다.
 어떤 에지도 2 개의 layer 를 건너가지 않는다.(동일 레이어의 노드를 연결하거나, 혹은 1개의 layer 를 건너간다.)

 BFS 트리에서의 최단 경로 출력하기
 슈도 코드
 PRINT-PATH(G,S,V) // 출발점 s 에서 노드 v 까지의 경로 출력하기(모든 노드에 대해 π[v] 를 이미 다 계산해 둔 것으로 가정한다.)
    if v = s then
        print s;
    else if π[v] = null then // 어떤 노드에 대해 π[v] = null 인 경우는 두 가지이다.(v 자신이 s 이거나, 실제로 s 에서 v 까지가는 경로가 단 하나라도 존재하지 않는다는 뜻 - 그래프 자체가 disconnected 할 경우에 발생할 수 있다.)
        print "no path from s to v exists";
    else
        PRINT-PATH(G,s,π[v]); // 메소드 재귀 호출
        print v;
    end.

그래프가 disconnected 이거나 혹은 방향 그래프라면 BFS에 의해서 모든 노드가 방문되지 않을 수도 있다.
이런 경우 BFS를 반복하여 모든 노드 방문
BFS-ALL(G)
{
    while there exists unvisited node v
        BFS(G,v);
}